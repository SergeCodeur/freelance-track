// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  country       String?   // e.g., "BJ" for Benin
  currency      String?   // e.g., "XOF"
  phone         String?
  freelancerType String?   // e.g., "dev", "design", "marketing"
  emailVerified DateTime? // NextAuth requires this field for email provider, can ignore for credentials
  image         String?   // NextAuth can use this, optional here
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  clients Client[]
  missions Mission[] @relation("UserMissions")

  // NextAuth specific fields if using Adapter directly (optional for Credentials)
  accounts Account[]
  sessions Session[]
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  missions Mission[]

  @@index([userId])
}

model Mission {
  id        String   @id @default(cuid())
  title     String
  amount    Float
  currency  String   // Inherited from user at creation time
  date      DateTime // Due date or completion date
  status    String   // "paid", "pending", "partial", "cancelled"
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserMissions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}


// NextAuth Models (needed if using Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}